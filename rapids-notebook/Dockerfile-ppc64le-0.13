ARG ARCH
ARG VERSION
ARG BASE_CONTAINER=adamjm32/kf-machine-learning-notebook-gpu-${ARCH}:$VERSION
FROM $BASE_CONTAINER
ARG ARCH=amd64
LABEL maintainer="Adam Makarucha"

USER root

## Compile CUDF from source to enable it to work with existing dependancies
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update -y --fix-missing && \
    apt upgrade -y && \
    apt install -y \
      git \
      build-essential \
      libboost-all-dev \
      tzdata \
      libgdal-dev \
      libedit-dev \
      gdal-bin

# Install conda
# Enables "source activate conda

ARG CC=gcc 
ARG CXX=g++
ARG PARALLEL_LEVEL=128
ARG RAI_VERSION=branch-0.13
ARG NUMBA_VERSION=0.48.0
ARG LLVMLITE_VERSION=v0.31.0
ARG LLVMDEV_VERSION=8.0.0
ARG CUPY_VERSION=7.6.0

USER root

RUN mkdir /tmp/peg && cd /tmp/peg && wget https://www.piumarta.com/software/peg/peg-0.1.18.tar.gz && \
    tar xvf peg-0.1.18.tar.gz && cd peg-0.1.18/ && \
    make && make install && \
    mkdir /tmp/libcypher && cd /tmp/libcypher && wget https://github.com/cleishm/libcypher-parser/releases/download/v0.6.1/libcypher-parser-0.6.1.tar.gz && \
    tar xvf libcypher-parser-0.6.1.tar.gz && cd libcypher-parser-0.6.1/ &&  ./configure && \
    make clean check && \
    make install

USER $NB_UID

COPY cudf_dev_cuda10.2_$ARCH.yml /tmp/cudf_environment.yml
# Get CUDF

## Install Dependancies 

RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
    conda install --quiet --yes -n base "pyarrow=0.15.1" "arrow-cpp=0.15.1" "python-graphviz=0.14" "streamz=0.5.2" networkx python-louvain && \
    conda install -c numba llvmdev=$LLVMDEV_VERSION && \
    conda env update --file /tmp/cudf_environment.yml  --prune && \
    conda clean --all -f -y && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

RUN git clone git://github.com/numba/numba.git /tmp/numba && \
    git clone https://github.com/numba/llvmlite.git /tmp/llvmlite && \
    cd /tmp/llvmlite && git checkout $LLVMLITE_VERSION && \
    python setup.py build && python runtests.py && \
    python setup.py install && \
    cd /tmp/numba && git checkout $NUMBA_VERSION && \
    python setup.py build_ext --inplace && \
    python setup.py install && \
    pip install . && \
    pip install cupy==$CUPY_VERSION && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

ARG CC=/usr/bin/gcc 
ARG CXX=/usr/bin/g++

COPY rmm_cmakeLists_test.patch /tmp/
COPY rmm_build.patch /tmp/

RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
    mkdir /tmp/rmm && \
    git clone --recurse-submodules https://github.com/rapidsai/rmm.git /tmp/rmm && \
    cd /tmp/rmm && \
    git checkout $RAI_VERSION && \
    git submodule update --init --remote --recursive && \
    git apply /tmp/rmm_cmakeLists_test.patch && \
    git apply /tmp/rmm_build.patch && \
    ./build.sh -v clean librmm && \
    ./build.sh -v rmm && \
    cd build && \ 
#    make test && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

COPY cudf_arrow_version_update.patch /tmp/cudf_arrow_version_update.patch
COPY cudf_build.patch /tmp/cudf_build.patch
COPY cudf_cmake.patch /tmp/cudf_cmake.patch
COPY cudf_jitify.patch /tmp/cudf_jitify.patch
COPY cudf_cfloat.patch /tmp/cudf_cfloat.patch
COPY cudf_setup_cmake.patch /tmp/cudf_setup_cmake.patch

RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
    mkdir /tmp/cudf && \
    git clone https://github.com/rapidsai/cudf.git /tmp/cudf && \
    cd /tmp/cudf && \
    git checkout $RAI_VERSION && \
    git submodule update --init --remote --recursive && \
    git apply /tmp/cudf_arrow_version_update.patch && \
    git apply /tmp/cudf_build.patch && \
    git apply /tmp/cudf_cmake.patch && \
    git apply /tmp/cudf_jitify.patch && \
    git apply /tmp/cudf_cfloat.patch && \
    git apply /tmp/cudf_setup_cmake.patch && \
    ./build.sh -v libnvstrings libcudf --allgpuarch && \
    ./build.sh -v nvstrings && \
    ./build.sh -v cudf && \
    ./build.sh -v dask_cudf && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

COPY cuml_build.patch /tmp/cuml_build.patch
COPY cuml_add_cudart.patch /tmp/cuml_add_cudart.patch
COPY cuml_cpp.cmakelist.patch /tmp/cuml_cpp.cmakelist.patch
COPY cuml_cpp.comms.std.src.patch /tmp/cuml_cpp.comms.std.src.patch
COPY cuml_cpp.test.cmakelists.patch /tmp/cuml_cpp.test.cmakelists.patch
COPY cuml_setup.patch /tmp/cuml_setup.patch

RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
    mkdir /tmp/cuml && \
    git clone https://github.com/rapidsai/cuml.git /tmp/cuml && \
    cd /tmp/cuml && \
    git checkout $RAI_VERSION && \
    git submodule update --init --remote --recursive && \
    git apply /tmp/cuml_add_cudart.patch && \
    git apply /tmp/cuml_build.patch && \
    git apply /tmp/cuml_cpp.cmakelist.patch && \
    git apply /tmp/cuml_cpp.comms.std.src.patch && \
    git apply /tmp/cuml_cpp.test.cmakelists.patch && \
    git apply /tmp/cuml_setup.patch && \
    ./build.sh libcuml -v --allgpuarch --singlegpu && \
    #CUDA_SO_PATH=`find $PREFIX -name libcuda.so | grep 'stub' |cut -d ' ' -f 1` && \
    #ln -s $CUDA_SO_PATH $PREFIX/lib/libcuda.so && \
    #export CUDA_HOME=$PREFIX && \
    #mkdir -p $PREFIX/bin/ && \
    ./build.sh cuml --singlegpu 
    #rm -v $PREFIX/lib/libcuda.so 

#RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
#    mkdir /tmp/cugraph && \
#    git clone https://github.com/rapidsai/cugraph.git /tmp/cugraph && \
#    cd /tmp/cugraph && \
#    git checkout $RAI_VERSION && \
#    git submodule update --init --remote --recursive && \
#    mkdir build && \
#    cd build  && \
#    cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_CXX11_ABI=ON -DBLAS_LIBRARIES=$CONDA_PREFIX/lib/libopenblas.so && \
#    make -j $NUM_PROCESSES && \
#    make install && \
#    cd /tmp/cugraph/python/ && \
#    python setup.py build_ext --inplace && \
#    python setup.py install 
#
#ENV CUDF_HOME=/tmp/cudf
#ARG CUDF_HOME=/tmp/cudf
#
#RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
#    mkdir /tmp/cuspatial && \
#    git clone https://github.com/rapidsai/cuspatial.git /tmp/cuspatial && \
#    cd /tmp/cuspatial && \
#    git checkout $RAI_VERSION && \
#    git submodule update --init --remote --recursive && \
#    cd /tmp/cuspatial/cpp && \
#    mkdir build && \
#    cd build  && \
#    cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_CXX11_ABI=ON -DBLAS_LIBRARIES=$CONDA_PREFIX/lib/libopenblas.so && \
#    make -j $NUM_PROCESSES && \
#    make install && \
#    cd /tmp/cuspatial/python/cuspatial && \
#    python setup.py build_ext --inplace && \
#    python setup.py install && \
#    fix-permissions $HOME && \
#    fix-permissions $CONDA_DIR 

USER root
RUN apt update -y && \
    apt install -y \
    maven 

USER $NB_UID

ARG JAVA_HOME=/usr/lib/jvm/java-8-openjdk-ppc64el
ENV JAVA_HOME=$JAVA_HOME

RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
    conda install --yes -n base -c conda-forge gtest gmock cppzmq && \ 
    #cppzmq pyhive && \
    pip install JPype1 netifaces 


RUN eval "$(conda shell.bash hook |sed 's/base/base/g')" && \
    mkdir /tmp/blazingsql && \
    git clone https://github.com/BlazingDB/blazingsql.git /tmp/blazingsql && \
    cd /tmp/blazingsql && \
    git checkout $RAI_VERSION && \
    git submodule update --init --remote --recursive && \
    ./build.sh

USER root 
RUN mkdir /home/jovyan/.local  && chown -R $NB_UID:$NB_UID /home/jovyan/.local
USER $NB_UID
