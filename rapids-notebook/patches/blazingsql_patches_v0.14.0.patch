diff --git a/build.sh b/build.sh
index b57851b..1d27a85 100755
--- a/build.sh
+++ b/build.sh
@@ -59,7 +59,7 @@ PARALLEL_LEVEL=${PARALLEL_LEVEL:=""}
 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INSTALL_PREFIX/lib
 export CXXFLAGS="-L$INSTALL_PREFIX/lib"
 export CFLAGS=$CXXFLAGS
-export CUDACXX=/usr/local/cuda/bin/nvcc
+export CUDACXX=${CONDA_PREFIX}/bin/nvcc
 
 function hasArg {
     (( ${NUMARGS} != 0 )) && (echo " ${ARGS} " | grep -q " $1 ")
@@ -166,16 +166,16 @@ if buildAll || hasArg libengine; then
 
     echo "Building libengine: make step"
     if [[ ${TESTS} == "ON" ]]; then
-        echo "make -j4 all"
-        make -j4 all
+        echo "make -j${PARALLEL_LEVEL} all"
+        make -j${PARALLEL_LEVEL} all
     else
-        echo "make -j4 blazingsql-engine VERBOSE=${VERBOSE}"
-        make -j4 blazingsql-engine VERBOSE=${VERBOSE}
+        echo "make -j${PARALLEL_LEVEL} blazingsql-engine VERBOSE=${VERBOSE}"
+        make -j${PARALLEL_LEVEL} blazingsql-engine VERBOSE=${VERBOSE}
     fi
 
     if [[ ${INSTALL_TARGET} != "" ]]; then
-        echo "make -j4 install VERBOSE=${VERBOSE}"
-        make -j4 install VERBOSE=${VERBOSE}
+        echo "make -j${PARALLEL_LEVEL} install VERBOSE=${VERBOSE}"
+        make -j${PARALLEL_LEVEL} install VERBOSE=${VERBOSE}
         cp libblazingsql-engine.so ${INSTALL_PREFIX}/lib/libblazingsql-engine.so
     fi
 fi
diff --git a/pyblazing/pyblazing/apiv2/context.py b/pyblazing/pyblazing/apiv2/context.py
index 9e4bf5c..cc2097b 100644
--- a/pyblazing/pyblazing/apiv2/context.py
+++ b/pyblazing/pyblazing/apiv2/context.py
@@ -22,6 +22,7 @@ import socket
 import errno
 import subprocess
 import os
+import platform
 import re
 import pandas
 import numpy as np
@@ -53,7 +54,16 @@ jpype.addClassPath(
         os.getenv("CONDA_PREFIX"),
         'lib/blazingsql-algebra-core.jar'))
 
-jvm_path=os.environ["CONDA_PREFIX"]+"/jre/lib/amd64/server/libjvm.so"
+arch = platform.machine()
+jvm_path=os.environ["CONDA_PREFIX"]+"/jre/lib/"+ arch + "/server/libjvm.so"
+
+if not os.path.exists(jvm_path):
+    if os.environ.get("JAVA_HOME"):
+        jvm_path=os.environ["JAVA_HOME"]+"/jre/lib/" + arch +"/server/libjvm.so"
+    else:
+        raise FileNotFoundError(
+        errno.ENOENT, os.strerror(errno.ENOENT), jvm_path)
+
 jpype.startJVM('-ea', convertStrings=False, jvmpath=jvm_path)
 
 ArrayClass = jpype.JClass('java.util.ArrayList')
