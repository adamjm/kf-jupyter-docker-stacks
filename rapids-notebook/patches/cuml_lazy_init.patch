# Internal issue - https://github.ibm.com/mldlppc/tracker/issues/13395
# Patch from community PR https://github.com/rapidsai/cuml/pull/1473/files titled
# " [REVIEW] Lazy initialization of "costly" resources inside cumlHandle "
# to handle the issue of cuML pytests running out-of-GPU-memory with CUDA 10.2

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4571611..03221c0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -272,6 +272,7 @@
 - PR #812: Add cuML Communications API & consolidate Dask cuML
 
 ## Improvements
+- PR #1473: C++: lazy initialization of "costly" resources inside cumlHandle
 
 - PR #597: C++ cuML and ml-prims folder refactor
 - PR #590: QN Recover from numeric errors
diff --git a/cpp/src/common/cumlHandle.cpp b/cpp/src/common/cumlHandle.cpp
index 1f7d131..69d67ee 100644
--- a/cpp/src/common/cumlHandle.cpp
+++ b/cpp/src/common/cumlHandle.cpp
@@ -189,9 +189,13 @@ cumlHandle_impl::cumlHandle_impl(int n_streams)
       return cur_dev;
     }()),
     _num_streams(n_streams),
+    _cublasInitialized(false),
+    _cusolverDnInitialized(false),
+    _cusparseInitialized(false),
     _deviceAllocator(std::make_shared<defaultDeviceAllocator>()),
     _hostAllocator(std::make_shared<defaultHostAllocator>()),
-    _userStream(NULL) {
+    _userStream(NULL),
+    _devicePropInitialized(false) {
   createResources();
 }
 
@@ -204,7 +208,11 @@ void cumlHandle_impl::setStream(cudaStream_t stream) { _userStream = stream; }
 cudaStream_t cumlHandle_impl::getStream() const { return _userStream; }
 
 const cudaDeviceProp& cumlHandle_impl::getDeviceProperties() const {
-  return prop;
+  if (!_devicePropInitialized) {
+    CUDA_CHECK(cudaGetDeviceProperties(&_prop, _dev_id));
+    _devicePropInitialized = true;
+  }
+  return _prop;
 }
 
 void cumlHandle_impl::setDeviceAllocator(
@@ -226,14 +234,26 @@ std::shared_ptr<hostAllocator> cumlHandle_impl::getHostAllocator() const {
 }
 
 cublasHandle_t cumlHandle_impl::getCublasHandle() const {
+  if (!_cublasInitialized) {
+    CUBLAS_CHECK(cublasCreate(&_cublas_handle));
+    _cublasInitialized = true;
+  }
   return _cublas_handle;
 }
 
 cusolverDnHandle_t cumlHandle_impl::getcusolverDnHandle() const {
+  if (!_cusolverDnInitialized) {
+    CUSOLVER_CHECK(cusolverDnCreate(&_cusolverDn_handle));
+    _cusolverDnInitialized = true;
+  }
   return _cusolverDn_handle;
 }
 
 cusparseHandle_t cumlHandle_impl::getcusparseHandle() const {
+  if (!_cusparseInitialized) {
+    CUSPARSE_CHECK(cusparseCreate(&_cusparse_handle));
+    _cusparseInitialized = true;
+  }
   return _cusparse_handle;
 }
 
@@ -248,7 +268,6 @@ std::vector<cudaStream_t> cumlHandle_impl::getInternalStreams() const {
   for (auto s : _streams) {
     int_streams_vec.push_back(s);
   }
-
   return int_streams_vec;
 }
 
@@ -284,9 +303,6 @@ bool cumlHandle_impl::commsInitialized() const {
 void cumlHandle_impl::createResources() {
   cudaStream_t stream;
   CUDA_CHECK(cudaStreamCreate(&stream));
-  CUBLAS_CHECK(cublasCreate(&_cublas_handle));
-  CUSOLVER_CHECK(cusolverDnCreate(&_cusolverDn_handle));
-  CUSPARSE_CHECK(cusparseCreate(&_cusparse_handle));
   _streams.push_back(stream);
   for (int i = 1; i < _num_streams; ++i) {
     cudaStream_t stream;
@@ -294,34 +310,30 @@ void cumlHandle_impl::createResources() {
     _streams.push_back(stream);
   }
   CUDA_CHECK(cudaEventCreateWithFlags(&_event, cudaEventDisableTiming));
-  CUDA_CHECK(cudaGetDeviceProperties(&prop, _dev_id));
 }
 
 void cumlHandle_impl::destroyResources() {
-  {
+  if (_cusparseInitialized) {
     cusparseStatus_t status = cusparseDestroy(_cusparse_handle);
     if (CUSPARSE_STATUS_SUCCESS != status) {
       //TODO: Add loging of this error. Needs: https://github.com/rapidsai/cuml/issues/100
       // deallocate should not throw execeptions which is why CUSPARSE_CHECK is not used.
     }
   }
-
-  {
+  if (_cusolverDnInitialized) {
     cusolverStatus_t status = cusolverDnDestroy(_cusolverDn_handle);
     if (CUSOLVER_STATUS_SUCCESS != status) {
       //TODO: Add loging of this error. Needs: https://github.com/rapidsai/cuml/issues/100
       // deallocate should not throw execeptions which is why CUSOLVER_CHECK is not used.
     }
   }
-
-  {
+  if (_cublasInitialized) {
     cublasStatus_t status = cublasDestroy(_cublas_handle);
     if (CUBLAS_STATUS_SUCCESS != status) {
       //TODO: Add loging of this error. Needs: https://github.com/rapidsai/cuml/issues/100
       // deallocate should not throw execeptions which is why CUBLAS_CHECK is not used.
     }
   }
-
   while (!_streams.empty()) {
     cudaError_t status = cudaStreamDestroy(_streams.back());
     if (cudaSuccess != status) {
diff --git a/cpp/src/common/cumlHandle.hpp b/cpp/src/common/cumlHandle.hpp
index abd3b12..cb29fd2 100644
--- a/cpp/src/common/cumlHandle.hpp
+++ b/cpp/src/common/cumlHandle.hpp
@@ -75,14 +75,18 @@ class cumlHandle_impl {
   const int _dev_id;
   const int _num_streams;
   std::vector<cudaStream_t> _streams;
-  cublasHandle_t _cublas_handle;
-  cusolverDnHandle_t _cusolverDn_handle;
-  cusparseHandle_t _cusparse_handle;
+  mutable cublasHandle_t _cublas_handle;
+  mutable bool _cublasInitialized;
+  mutable cusolverDnHandle_t _cusolverDn_handle;
+  mutable bool _cusolverDnInitialized;
+  mutable cusparseHandle_t _cusparse_handle;
+  mutable bool _cusparseInitialized;
   std::shared_ptr<deviceAllocator> _deviceAllocator;
   std::shared_ptr<hostAllocator> _hostAllocator;
   cudaStream_t _userStream;
   cudaEvent_t _event;
-  cudaDeviceProp prop;
+  mutable cudaDeviceProp _prop;
+  mutable bool _devicePropInitialized;
 
   std::shared_ptr<MLCommon::cumlCommunicator> _communicator;

